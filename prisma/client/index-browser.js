
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  version: 'version'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  version: 'version'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  overridePin: 'overridePin',
  lastName: 'lastName',
  firstName: 'firstName',
  mobile: 'mobile',
  email: 'email',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.OverrideLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  approverId: 'approverId',
  action: 'action',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  userId: 'userId',
  outletId: 'outletId',
  key: 'key',
  value: 'value',
  type: 'type',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  referralId: 'referralId',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  companyStreet: 'companyStreet',
  companyCity: 'companyCity',
  companyState: 'companyState',
  companyPostalCode: 'companyPostalCode',
  companyCountry: 'companyCountry',
  companyRegisterNumber: 'companyRegisterNumber',
  personInChargeLastName: 'personInChargeLastName',
  personInChargeFirstName: 'personInChargeFirstName',
  mobile: 'mobile',
  email: 'email',
  remark: 'remark',
  hasTax: 'hasTax',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  salutation: 'salutation',
  lastName: 'lastName',
  firstName: 'firstName',
  mobile: 'mobile',
  email: 'email',
  gender: 'gender',
  billStreet: 'billStreet',
  billCity: 'billCity',
  billState: 'billState',
  billPostalCode: 'billPostalCode',
  billCountry: 'billCountry',
  billRemark: 'billRemark',
  shipStreet: 'shipStreet',
  shipCity: 'shipCity',
  shipState: 'shipState',
  shipPostalCode: 'shipPostalCode',
  shipCountry: 'shipCountry',
  shipRemark: 'shipRemark',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  registrationNumber: 'registrationNumber',
  website: 'website',
  referralId: 'referralId',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.OutletScalarFieldEnum = {
  id: 'id',
  tenantOutletId: 'tenantOutletId',
  outletName: 'outletName',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  outletTel: 'outletTel',
  outletEmail: 'outletEmail',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  itemName: 'itemName',
  itemCode: 'itemCode',
  itemType: 'itemType',
  itemModel: 'itemModel',
  itemBrand: 'itemBrand',
  itemDescription: 'itemDescription',
  categoryId: 'categoryId',
  cost: 'cost',
  price: 'price',
  currency: 'currency',
  isOpenPrice: 'isOpenPrice',
  unitOfMeasure: 'unitOfMeasure',
  height: 'height',
  width: 'width',
  length: 'length',
  weight: 'weight',
  alternateLookUp: 'alternateLookUp',
  image: 'image',
  hasTax: 'hasTax',
  taxRate: 'taxRate',
  supplierId: 'supplierId',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentId: 'parentId',
  image: 'image',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.SalesScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  businessDate: 'businessDate',
  salesType: 'salesType',
  customerName: 'customerName',
  customerId: 'customerId',
  phoneNumber: 'phoneNumber',
  billStreet: 'billStreet',
  billCity: 'billCity',
  billState: 'billState',
  billPostalCode: 'billPostalCode',
  billCountry: 'billCountry',
  shipStreet: 'shipStreet',
  shipCity: 'shipCity',
  shipState: 'shipState',
  shipPostalCode: 'shipPostalCode',
  shipCountry: 'shipCountry',
  totalItemDiscountAmount: 'totalItemDiscountAmount',
  discountPercentage: 'discountPercentage',
  discountAmount: 'discountAmount',
  profitAmount: 'profitAmount',
  serviceChargeAmount: 'serviceChargeAmount',
  taxAmount: 'taxAmount',
  roundingAmount: 'roundingAmount',
  subtotalAmount: 'subtotalAmount',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  changeAmount: 'changeAmount',
  status: 'status',
  remark: 'remark',
  completedSessionId: 'completedSessionId',
  sessionId: 'sessionId',
  eodId: 'eodId',
  salesQuotationId: 'salesQuotationId',
  performedBy: 'performedBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  tableId: 'tableId',
  orderStatus: 'orderStatus'
};

exports.Prisma.SalesItemScalarFieldEnum = {
  id: 'id',
  salesId: 'salesId',
  itemId: 'itemId',
  itemName: 'itemName',
  itemCode: 'itemCode',
  itemBrand: 'itemBrand',
  itemModel: 'itemModel',
  quantity: 'quantity',
  cost: 'cost',
  price: 'price',
  priceBeforeTax: 'priceBeforeTax',
  profit: 'profit',
  discountPercentage: 'discountPercentage',
  discountAmount: 'discountAmount',
  serviceChargeAmount: 'serviceChargeAmount',
  taxAmount: 'taxAmount',
  subtotalAmount: 'subtotalAmount',
  remark: 'remark',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  specialInstructions: 'specialInstructions',
  itemStatus: 'itemStatus',
  priority: 'priority',
  estimatedPrepTime: 'estimatedPrepTime'
};

exports.Prisma.SalesItemModifierScalarFieldEnum = {
  id: 'id',
  salesItemId: 'salesItemId',
  menuItemModifierId: 'menuItemModifierId',
  itemId: 'itemId',
  modifierName: 'modifierName',
  modifierPrice: 'modifierPrice',
  quantity: 'quantity',
  status: 'status',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.SalesQuotationScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  customerId: 'customerId',
  customerStreet: 'customerStreet',
  customerCity: 'customerCity',
  customerState: 'customerState',
  customerPostalCode: 'customerPostalCode',
  customerCountry: 'customerCountry',
  discountPercentage: 'discountPercentage',
  discountAmount: 'discountAmount',
  serviceChargeAmount: 'serviceChargeAmount',
  taxAmount: 'taxAmount',
  roundingAmount: 'roundingAmount',
  subtotalAmount: 'subtotalAmount',
  totalAmount: 'totalAmount',
  status: 'status',
  remark: 'remark',
  performedBy: 'performedBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.SalesQuotationItemScalarFieldEnum = {
  id: 'id',
  salesQuotationId: 'salesQuotationId',
  itemId: 'itemId',
  quantity: 'quantity',
  remark: 'remark',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  taxInvoiceNumber: 'taxInvoiceNumber',
  purchaseOrderId: 'purchaseOrderId',
  supplierId: 'supplierId',
  outletId: 'outletId',
  subtotalAmount: 'subtotalAmount',
  taxAmount: 'taxAmount',
  sessionId: 'sessionId',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  currency: 'currency',
  status: 'status',
  invoiceDate: 'invoiceDate',
  paymentDate: 'paymentDate',
  dueDate: 'dueDate',
  remark: 'remark',
  performedBy: 'performedBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  itemId: 'itemId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  taxAmount: 'taxAmount',
  subtotal: 'subtotal',
  remark: 'remark',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  version: 'version'
};

exports.Prisma.DeliveryOrderScalarFieldEnum = {
  id: 'id',
  trackingNumber: 'trackingNumber',
  outletId: 'outletId',
  customerId: 'customerId',
  purchaseOrderId: 'purchaseOrderId',
  supplierId: 'supplierId',
  invoiceId: 'invoiceId',
  sessionId: 'sessionId',
  deliveryDate: 'deliveryDate',
  deliveryStreet: 'deliveryStreet',
  deliveryCity: 'deliveryCity',
  deliveryState: 'deliveryState',
  deliveryPostalCode: 'deliveryPostalCode',
  deliveryCountry: 'deliveryCountry',
  status: 'status',
  remark: 'remark',
  performedBy: 'performedBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.DeliveryOrderItemScalarFieldEnum = {
  id: 'id',
  deliveryOrderId: 'deliveryOrderId',
  itemId: 'itemId',
  orderedQuantity: 'orderedQuantity',
  receivedQuantity: 'receivedQuantity',
  unitPrice: 'unitPrice',
  remark: 'remark',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  purchaseOrderNumber: 'purchaseOrderNumber',
  outletId: 'outletId',
  supplierId: 'supplierId',
  purchaseOrderDate: 'purchaseOrderDate',
  sessionId: 'sessionId',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  serviceChargeAmount: 'serviceChargeAmount',
  taxAmount: 'taxAmount',
  roundingAmount: 'roundingAmount',
  subtotalAmount: 'subtotalAmount',
  totalAmount: 'totalAmount',
  status: 'status',
  remark: 'remark',
  currency: 'currency',
  performedBy: 'performedBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchaseOrderId: 'purchaseOrderId',
  itemId: 'itemId',
  quantity: 'quantity',
  taxAmount: 'taxAmount',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal',
  remark: 'remark',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  tenderedAmount: 'tenderedAmount',
  paidAmount: 'paidAmount',
  currencySymbol: 'currencySymbol',
  salesId: 'salesId',
  reference: 'reference',
  remark: 'remark',
  businessDate: 'businessDate',
  status: 'status',
  outletId: 'outletId',
  sessionId: 'sessionId',
  eodId: 'eodId',
  performedBy: 'performedBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.RegisterLogScalarFieldEnum = {
  id: 'id',
  type: 'type',
  modifiedAmount: 'modifiedAmount',
  currencySymbol: 'currencySymbol',
  salesId: 'salesId',
  remark: 'remark',
  status: 'status',
  outletId: 'outletId',
  sessionId: 'sessionId',
  eodId: 'eodId',
  performedBy: 'performedBy',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.CardInfoScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  cardNumber: 'cardNumber',
  cardExpiry: 'cardExpiry',
  traceNumber: 'traceNumber',
  type2: 'type2',
  type3: 'type3',
  cardRate: 'cardRate',
  appCode: 'appCode',
  cardType: 'cardType',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  businessDate: 'businessDate',
  openingDateTime: 'openingDateTime',
  closingDateTime: 'closingDateTime',
  openingAmount: 'openingAmount',
  totalSalesCount: 'totalSalesCount',
  openByUserID: 'openByUserID',
  closeByUserID: 'closeByUserID',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.DeclarationScalarFieldEnum = {
  id: 'id',
  paymentType: 'paymentType',
  totalPaymentAmount: 'totalPaymentAmount',
  declarationAmount: 'declarationAmount',
  differenceAmount: 'differenceAmount',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  sessionID: 'sessionID'
};

exports.Prisma.StockBalanceScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  outletId: 'outletId',
  availableQuantity: 'availableQuantity',
  onHandQuantity: 'onHandQuantity',
  reorderThreshold: 'reorderThreshold',
  deleted: 'deleted',
  lastRestockDate: 'lastRestockDate',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.StockReceiptScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  outletId: 'outletId',
  quantity: 'quantity',
  cost: 'cost',
  receiptDate: 'receiptDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  version: 'version'
};

exports.Prisma.StockReceiptArchiveScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  outletId: 'outletId',
  quantity: 'quantity',
  cost: 'cost',
  receiptDate: 'receiptDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  version: 'version'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  outletId: 'outletId',
  previousAvailableQuantity: 'previousAvailableQuantity',
  previousOnHandQuantity: 'previousOnHandQuantity',
  availableQuantityDelta: 'availableQuantityDelta',
  onHandQuantityDelta: 'onHandQuantityDelta',
  movementType: 'movementType',
  documentId: 'documentId',
  reason: 'reason',
  remark: 'remark',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  performedBy: 'performedBy'
};

exports.Prisma.StockMovementArchiveScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  itemCode: 'itemCode',
  itemName: 'itemName',
  outletId: 'outletId',
  outletName: 'outletName',
  previousAvailableQuantity: 'previousAvailableQuantity',
  previousOnHandQuantity: 'previousOnHandQuantity',
  availableQuantityDelta: 'availableQuantityDelta',
  onHandQuantityDelta: 'onHandQuantityDelta',
  movementType: 'movementType',
  documentId: 'documentId',
  documentType: 'documentType',
  reason: 'reason',
  remark: 'remark',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.StockSnapshotScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  outletId: 'outletId',
  availableQuantity: 'availableQuantity',
  onHandQuantity: 'onHandQuantity',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.MenuProfileOutletScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  menuProfileID: 'menuProfileID',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.MenuProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd',
  timeStart: 'timeStart',
  timeEnd: 'timeEnd',
  isMonday: 'isMonday',
  isTuesday: 'isTuesday',
  isWednesday: 'isWednesday',
  isThursday: 'isThursday',
  isFriday: 'isFriday',
  isSaturday: 'isSaturday',
  isSunday: 'isSunday',
  sequence: 'sequence',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.MenuCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  menuProfileID: 'menuProfileID',
  imageURL: 'imageURL',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  itemID: 'itemID',
  itemCode: 'itemCode',
  imageURL: 'imageURL',
  price: 'price',
  sequence: 'sequence',
  menuCategoryID: 'menuCategoryID',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.MenuItemModifierGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  minSelection: 'minSelection',
  maxSelection: 'maxSelection',
  sequence: 'sequence',
  menuItemID: 'menuItemID',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  freeModifierLimit: 'freeModifierLimit'
};

exports.Prisma.MenuItemModifierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  itemID: 'itemID',
  itemCode: 'itemCode',
  imageURL: 'imageURL',
  price: 'price',
  defaultSelectionQty: 'defaultSelectionQty',
  sequence: 'sequence',
  menuItemModifierGroupID: 'menuItemModifierGroupID',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.TableScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  tableNumber: 'tableNumber',
  capacity: 'capacity',
  status: 'status',
  salesId: 'salesId',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  itemId: 'itemId',
  quantity: 'quantity',
  unit: 'unit',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  batchYield: 'batchYield',
  menuItemModifierId: 'menuItemModifierId'
};

exports.Prisma.StationScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  name: 'name',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  customerId: 'customerId',
  tableId: 'tableId',
  dateTime: 'dateTime',
  partySize: 'partySize',
  status: 'status',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.OrderRoutingScalarFieldEnum = {
  id: 'id',
  salesItemId: 'salesItemId',
  stationId: 'stationId',
  status: 'status',
  sentAt: 'sentAt',
  completedAt: 'completedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.WaitlistScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  customerId: 'customerId',
  partySize: 'partySize',
  status: 'status',
  waitTime: 'waitTime',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.SplitBillScalarFieldEnum = {
  id: 'id',
  salesId: 'salesId',
  amount: 'amount',
  paymentId: 'paymentId',
  customerId: 'customerId',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  status: 'status',
  priority: 'priority',
  combinationRule: 'combinationRule',
  discountType: 'discountType',
  discountValue: 'discountValue',
  buyQuantity: 'buyQuantity',
  getQuantity: 'getQuantity',
  getDiscountValue: 'getDiscountValue',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  validDays: 'validDays',
  minPurchaseAmount: 'minPurchaseAmount',
  minPurchaseQty: 'minPurchaseQty',
  maxUsageTotal: 'maxUsageTotal',
  maxUsagePerCustomer: 'maxUsagePerCustomer',
  currentUsage: 'currentUsage',
  isCustomerSpecific: 'isCustomerSpecific',
  createdBy: 'createdBy',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.PromotionItemScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  itemId: 'itemId',
  categoryId: 'categoryId',
  itemCode: 'itemCode',
  itemName: 'itemName',
  itemRole: 'itemRole',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.PromotionCustomerScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  customerId: 'customerId',
  maxUsage: 'maxUsage',
  currentUsage: 'currentUsage',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.PromotionUsageScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  customerId: 'customerId',
  salesId: 'salesId',
  discountAmount: 'discountAmount',
  usedAt: 'usedAt',
  version: 'version'
};

exports.Prisma.RegisteredDeviceScalarFieldEnum = {
  id: 'id',
  clientDeviceId: 'clientDeviceId',
  siteId: 'siteId',
  tenantId: 'tenantId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  status: 'status',
  appVersion: 'appVersion',
  lastSeenAt: 'lastSeenAt',
  registeredAt: 'registeredAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  name: 'name',
  category: 'category',
  description: 'description'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  overridePin: 'overridePin',
  lastName: 'lastName',
  firstName: 'firstName',
  mobile: 'mobile',
  email: 'email'
};

exports.Prisma.OverrideLogOrderByRelevanceFieldEnum = {
  action: 'action',
  reason: 'reason'
};

exports.Prisma.SettingOrderByRelevanceFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.SupplierOrderByRelevanceFieldEnum = {
  companyName: 'companyName',
  companyStreet: 'companyStreet',
  companyCity: 'companyCity',
  companyState: 'companyState',
  companyPostalCode: 'companyPostalCode',
  companyCountry: 'companyCountry',
  companyRegisterNumber: 'companyRegisterNumber',
  personInChargeLastName: 'personInChargeLastName',
  personInChargeFirstName: 'personInChargeFirstName',
  mobile: 'mobile',
  email: 'email',
  remark: 'remark'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  salutation: 'salutation',
  lastName: 'lastName',
  firstName: 'firstName',
  mobile: 'mobile',
  email: 'email',
  gender: 'gender',
  billStreet: 'billStreet',
  billCity: 'billCity',
  billState: 'billState',
  billPostalCode: 'billPostalCode',
  billCountry: 'billCountry',
  billRemark: 'billRemark',
  shipStreet: 'shipStreet',
  shipCity: 'shipCity',
  shipState: 'shipState',
  shipPostalCode: 'shipPostalCode',
  shipCountry: 'shipCountry',
  shipRemark: 'shipRemark'
};

exports.Prisma.CompanyOrderByRelevanceFieldEnum = {
  companyName: 'companyName',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  registrationNumber: 'registrationNumber',
  website: 'website',
  referralId: 'referralId'
};

exports.Prisma.OutletOrderByRelevanceFieldEnum = {
  outletName: 'outletName',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  outletTel: 'outletTel',
  outletEmail: 'outletEmail'
};

exports.Prisma.ItemOrderByRelevanceFieldEnum = {
  itemName: 'itemName',
  itemCode: 'itemCode',
  itemType: 'itemType',
  itemModel: 'itemModel',
  itemBrand: 'itemBrand',
  itemDescription: 'itemDescription',
  currency: 'currency',
  unitOfMeasure: 'unitOfMeasure',
  alternateLookUp: 'alternateLookUp',
  image: 'image'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  image: 'image'
};

exports.Prisma.SalesOrderByRelevanceFieldEnum = {
  salesType: 'salesType',
  customerName: 'customerName',
  phoneNumber: 'phoneNumber',
  billStreet: 'billStreet',
  billCity: 'billCity',
  billState: 'billState',
  billPostalCode: 'billPostalCode',
  billCountry: 'billCountry',
  shipStreet: 'shipStreet',
  shipCity: 'shipCity',
  shipState: 'shipState',
  shipPostalCode: 'shipPostalCode',
  shipCountry: 'shipCountry',
  status: 'status',
  remark: 'remark',
  performedBy: 'performedBy',
  orderStatus: 'orderStatus'
};

exports.Prisma.SalesItemOrderByRelevanceFieldEnum = {
  itemName: 'itemName',
  itemCode: 'itemCode',
  itemBrand: 'itemBrand',
  itemModel: 'itemModel',
  remark: 'remark',
  specialInstructions: 'specialInstructions',
  itemStatus: 'itemStatus',
  priority: 'priority'
};

exports.Prisma.SalesItemModifierOrderByRelevanceFieldEnum = {
  modifierName: 'modifierName'
};

exports.Prisma.SalesQuotationOrderByRelevanceFieldEnum = {
  customerStreet: 'customerStreet',
  customerCity: 'customerCity',
  customerState: 'customerState',
  customerPostalCode: 'customerPostalCode',
  customerCountry: 'customerCountry',
  status: 'status',
  remark: 'remark',
  performedBy: 'performedBy'
};

exports.Prisma.SalesQuotationItemOrderByRelevanceFieldEnum = {
  remark: 'remark'
};

exports.Prisma.InvoiceOrderByRelevanceFieldEnum = {
  invoiceNumber: 'invoiceNumber',
  taxInvoiceNumber: 'taxInvoiceNumber',
  discountType: 'discountType',
  currency: 'currency',
  status: 'status',
  remark: 'remark',
  performedBy: 'performedBy'
};

exports.Prisma.InvoiceItemOrderByRelevanceFieldEnum = {
  discountType: 'discountType',
  remark: 'remark'
};

exports.Prisma.DeliveryOrderOrderByRelevanceFieldEnum = {
  trackingNumber: 'trackingNumber',
  deliveryStreet: 'deliveryStreet',
  deliveryCity: 'deliveryCity',
  deliveryState: 'deliveryState',
  deliveryPostalCode: 'deliveryPostalCode',
  deliveryCountry: 'deliveryCountry',
  status: 'status',
  remark: 'remark',
  performedBy: 'performedBy'
};

exports.Prisma.DeliveryOrderItemOrderByRelevanceFieldEnum = {
  remark: 'remark'
};

exports.Prisma.PurchaseOrderOrderByRelevanceFieldEnum = {
  purchaseOrderNumber: 'purchaseOrderNumber',
  discountType: 'discountType',
  status: 'status',
  remark: 'remark',
  currency: 'currency',
  performedBy: 'performedBy'
};

exports.Prisma.PurchaseOrderItemOrderByRelevanceFieldEnum = {
  discountType: 'discountType',
  remark: 'remark'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  method: 'method',
  currencySymbol: 'currencySymbol',
  reference: 'reference',
  remark: 'remark',
  status: 'status',
  performedBy: 'performedBy'
};

exports.Prisma.RegisterLogOrderByRelevanceFieldEnum = {
  type: 'type',
  currencySymbol: 'currencySymbol',
  remark: 'remark',
  status: 'status',
  performedBy: 'performedBy'
};

exports.Prisma.CardInfoOrderByRelevanceFieldEnum = {
  cardNumber: 'cardNumber',
  cardExpiry: 'cardExpiry',
  traceNumber: 'traceNumber',
  type2: 'type2',
  type3: 'type3',
  appCode: 'appCode',
  cardType: 'cardType'
};

exports.Prisma.DeclarationOrderByRelevanceFieldEnum = {
  paymentType: 'paymentType'
};

exports.Prisma.StockMovementOrderByRelevanceFieldEnum = {
  movementType: 'movementType',
  reason: 'reason',
  remark: 'remark',
  performedBy: 'performedBy'
};

exports.Prisma.StockMovementArchiveOrderByRelevanceFieldEnum = {
  itemCode: 'itemCode',
  itemName: 'itemName',
  outletName: 'outletName',
  movementType: 'movementType',
  documentType: 'documentType',
  reason: 'reason',
  remark: 'remark'
};

exports.Prisma.MenuProfileOrderByRelevanceFieldEnum = {
  name: 'name',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd',
  timeStart: 'timeStart',
  timeEnd: 'timeEnd'
};

exports.Prisma.MenuCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  imageURL: 'imageURL'
};

exports.Prisma.MenuItemOrderByRelevanceFieldEnum = {
  name: 'name',
  itemCode: 'itemCode',
  imageURL: 'imageURL'
};

exports.Prisma.MenuItemModifierGroupOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.MenuItemModifierOrderByRelevanceFieldEnum = {
  name: 'name',
  itemCode: 'itemCode',
  imageURL: 'imageURL'
};

exports.Prisma.TableOrderByRelevanceFieldEnum = {
  tableNumber: 'tableNumber',
  status: 'status'
};

exports.Prisma.RecipeOrderByRelevanceFieldEnum = {
  unit: 'unit'
};

exports.Prisma.StationOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ReservationOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.OrderRoutingOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.WaitlistOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.PromotionOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  validDays: 'validDays',
  createdBy: 'createdBy'
};

exports.Prisma.PromotionItemOrderByRelevanceFieldEnum = {
  itemCode: 'itemCode',
  itemName: 'itemName',
  itemRole: 'itemRole'
};

exports.Prisma.RegisteredDeviceOrderByRelevanceFieldEnum = {
  clientDeviceId: 'clientDeviceId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  status: 'status',
  appVersion: 'appVersion'
};
exports.SettingType = exports.$Enums.SettingType = {
  INT: 'INT',
  STRING: 'STRING',
  BOOLEAN: 'BOOLEAN',
  JSON: 'JSON'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  ORDERED: 'ORDERED',
  PREPARING: 'PREPARING',
  SERVED: 'SERVED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.PromotionType = exports.$Enums.PromotionType = {
  DAILY: 'DAILY',
  HOURLY: 'HOURLY',
  GENERIC: 'GENERIC',
  CUSTOMER: 'CUSTOMER'
};

exports.PromotionStatus = exports.$Enums.PromotionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  EXPIRED: 'EXPIRED',
  SCHEDULED: 'SCHEDULED'
};

exports.CombinationRule = exports.$Enums.CombinationRule = {
  STACKABLE: 'STACKABLE',
  EXCLUSIVE: 'EXCLUSIVE'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT',
  BUY_X_GET_Y: 'BUY_X_GET_Y',
  BUY_X_GET_Y_DISCOUNT: 'BUY_X_GET_Y_DISCOUNT'
};

exports.Prisma.ModelName = {
  Role: 'Role',
  RolePermission: 'RolePermission',
  User: 'User',
  OverrideLog: 'OverrideLog',
  Setting: 'Setting',
  Referral: 'Referral',
  Supplier: 'Supplier',
  Customer: 'Customer',
  Company: 'Company',
  Outlet: 'Outlet',
  Item: 'Item',
  Category: 'Category',
  Sales: 'Sales',
  SalesItem: 'SalesItem',
  SalesItemModifier: 'SalesItemModifier',
  SalesQuotation: 'SalesQuotation',
  SalesQuotationItem: 'SalesQuotationItem',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  DeliveryOrder: 'DeliveryOrder',
  DeliveryOrderItem: 'DeliveryOrderItem',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  Payment: 'Payment',
  RegisterLog: 'RegisterLog',
  CardInfo: 'CardInfo',
  Session: 'Session',
  Declaration: 'Declaration',
  StockBalance: 'StockBalance',
  StockReceipt: 'StockReceipt',
  StockReceiptArchive: 'StockReceiptArchive',
  StockMovement: 'StockMovement',
  StockMovementArchive: 'StockMovementArchive',
  StockSnapshot: 'StockSnapshot',
  MenuProfileOutlet: 'MenuProfileOutlet',
  MenuProfile: 'MenuProfile',
  MenuCategory: 'MenuCategory',
  MenuItem: 'MenuItem',
  MenuItemModifierGroup: 'MenuItemModifierGroup',
  MenuItemModifier: 'MenuItemModifier',
  Table: 'Table',
  Recipe: 'Recipe',
  Station: 'Station',
  Reservation: 'Reservation',
  OrderRouting: 'OrderRouting',
  Waitlist: 'Waitlist',
  SplitBill: 'SplitBill',
  Promotion: 'Promotion',
  PromotionItem: 'PromotionItem',
  PromotionCustomer: 'PromotionCustomer',
  PromotionUsage: 'PromotionUsage',
  RegisteredDevice: 'RegisteredDevice'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

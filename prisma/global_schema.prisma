datasource db {
    provider = "mysql"
    url      = env("GLOBAL_DB_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/global-client"
}

model SubscriptionPlan {
    id           Int                  @id @default(autoincrement()) @map("ID")
    planName     String               @map("PLAN_NAME")
    price        Float                @map("PRICE")
    description  String?              @map("DESCRIPTION")
    subscription TenantSubscription[]

    @@map("SUBSCRIPTION_PLAN")
}

model SubscriptionAddOn {
    id            Int                       @id @default(autoincrement()) @map("ID")
    name          String                    @map("NAME")
    addOnType     String                    @map("ADD_ON_TYPE") // e.g., "user", "transaction", "feature"
    pricePerUnit  Float                     @map("PRICE_PER_UNIT")
    maxQuantity   Int?                      @map("MAX_QUANTITY")
    description   String?                   @map("DESCRIPTION")
    subscriptions TenantSubscriptionAddOn[]

    @@map("SUBSCRIPTION_ADD_ON")
}

model Tenant {
    id           Int                  @id @default(autoincrement()) @map("ID")
    tenantName   String               @map("TENANT_NAME")
    databaseName String?              @unique @map("DATABASE_NAME")
    createdAt    DateTime             @default(dbgenerated("(UTC_TIMESTAMP())")) @map("CREATED_AT")
    tenantUsers  TenantUser[]
    subscription TenantSubscription[]

    @@map("TENANT")
}

model TenantSubscription {
    id                     Int                       @id @default(autoincrement()) @map("ID")
    tenantId               Int                       @map("TENANT_ID")
    subscriptionPlanId     Int                       @map("SUBSCRIPTION_PLAN_ID")
    nextPaymentDate        DateTime                  @map("NEXT_PAYMENT_DATE")
    subscriptionValidUntil DateTime                  @map("SUBSCRIPTION_VALID_UNTIL")
    createdAt              DateTime                  @default(now()) @map("CREATED_AT")
    updatedAt              DateTime                  @updatedAt @map("UPDATED_AT")
    tenant                 Tenant                    @relation(fields: [tenantId], references: [id])
    subscriptionPlan       SubscriptionPlan          @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
    subscriptionAddOn      TenantSubscriptionAddOn[]

    @@map("TENANT_SUBSCRIPTION")
}

model TenantSubscriptionAddOn {
    id                   Int                @id @default(autoincrement()) @map("ID")
    tenantSubscriptionId Int                @map("TENANT_SUBSCRIPTION_ID")
    addOnId              Int                @map("ADD_ON_ID")
    quantity             Int                @default(0) @map("QUANTITY")
    tenantSubscription   TenantSubscription @relation(fields: [tenantSubscriptionId], references: [id], onDelete: Cascade)
    addOn                SubscriptionAddOn  @relation(fields: [addOnId], references: [id])

    @@unique([tenantSubscriptionId, addOnId])
    @@map("TENANT_SUBSCRIPTION_ADD_ON")
}

model TenantUser {
    id        Int     @id @default(autoincrement()) @map("ID")
    username  String  @unique @map("USERNAME")
    password  String? @map("PASSWORD")
    tenantId  Int     @map("TENANT_ID")
    tenant    Tenant? @relation(fields: [tenantId], references: [id])
    isDeleted Boolean @default(false) @map("IS_DELETED")

    @@map("TENANT_USER")
}

model RefreshToken {
    id           Int       @id @default(autoincrement()) @map("ID")
    tenantUserId Int       @map("TENANT_USER_ID")
    token        String    @map("TOKEN")
    expired      DateTime? @map("EXPIRED_DATETIME")
    created      DateTime  @default(now()) @map("CREATED_DATETIME")
    createdByIP  String?   @map("CREATED_BY")
    revoked      DateTime? @map("REVOKED_DATETIME")
    deleted      Boolean   @default(false) @map("IS_DELETED")

    @@map("REFRESH_TOKEN")
}

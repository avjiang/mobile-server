generator client {
  provider      = "prisma-client-js"
  output        = "../prisma/client"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("TENANT_DATABASE_URL")
}

enum SettingType {
  INT
  STRING
  BOOLEAN
  JSON
}

enum SalesType {
  DINE_IN
  TAKEOUT
  DELIVERY
  ONLINE
}

enum OrderStatus {
  ORDERED
  PREPARING
  SERVED
  DELIVERED
  CANCELLED
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  COMPLETED
  CANCELLED
}

enum DeliveryOrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

// Promotion Types Enum
enum PromotionType {
  DAILY // Daily promotions
  HOURLY // Time-based promotions (e.g., 7-9pm)
  GENERIC // Buy X Get Y, Stock clearance, etc.
  CUSTOMER // Customer-specific promotions

  @@map("PROMOTION_TYPE")
}

// Promotion Discount Types
enum DiscountType {
  PERCENTAGE // Percentage discount (e.g., 10% off)
  FIXED_AMOUNT // Fixed amount discount (e.g., $5 off)
  BUY_X_GET_Y // Buy X items, get Y items free
  BUY_X_GET_Y_DISCOUNT // Buy X items, get Y items at discount

  @@map("DISCOUNT_TYPE")
}

// Promotion Status
enum PromotionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  SCHEDULED

  @@map("PROMOTION_STATUS")
}

// Promotion Combination Rules (simple version)
enum CombinationRule {
  STACKABLE // Can be combined with other promotions
  EXCLUSIVE // Cannot be combined with any other promotion

  @@map("COMBINATION_RULE")
}

// Role model to store different roles (e.g., Admin, Cashier, Manager)
model Role {
  id          Int              @id @default(autoincrement()) @map("ID")
  name        String           @unique @map("NAME") // e.g., "Admin", "Cashier"
  category    String?          @map("CATEGORY") // e.g., "Cashier", "Admin"
  description String?          @map("DESCRIPTION")
  permission  RolePermission[] @relation("ROLE_PERMISSIONS") // Explicit relation to RolePermission
  users       User[]           @relation("USER_ROLES") // Many-to-many with users
  createdAt   DateTime?        @default(now()) @map("CREATED_AT")
  updatedAt   DateTime?        @updatedAt @map("UPDATED_AT")
  deleted     Boolean          @default(false) @map("IS_DELETED")
  deletedAt   DateTime?        @map("DELETED_AT")
  version     Int?             @default(1) @map("VERSION")

  @@map("ROLE")
}

model RolePermission {
  id           Int       @id @default(autoincrement()) @map("ID")
  roleId       Int       @map("ROLE_ID")
  permissionId Int       @map("PERMISSION_ID") // References global Permission.id (no foreign key)
  role         Role      @relation(fields: [roleId], references: [id], name: "ROLE_PERMISSIONS")
  createdAt    DateTime? @default(now()) @map("CREATED_AT")
  updatedAt    DateTime? @updatedAt @map("UPDATED_AT")
  deleted      Boolean   @default(false) @map("IS_DELETED")
  deletedAt    DateTime? @map("DELETED_AT")
  version      Int?      @default(1) @map("VERSION")

  @@unique([roleId, permissionId])
  @@map("ROLE_PERMISSION")
}

model User {
  id               Int           @id @default(autoincrement()) @map("ID")
  username         String        @unique @map("USERNAME")
  password         String        @map("PASSWORD")
  overridePin      String?       @map("OVERRIDE_PIN") // Hashed PIN for overrides
  lastName         String?       @map("LAST_NAME")
  firstName        String?       @map("FIRST_NAME")
  mobile           String?       @map("MOBILE")
  email            String?       @map("EMAIL")
  deleted          Boolean       @default(false) @map("IS_DELETED")
  deletedAt        DateTime?     @map("DELETED_AT")
  createdAt        DateTime?     @default(now()) @map("CREATED_AT")
  updatedAt        DateTime?     @updatedAt @map("UPDATED_AT")
  version          Int?          @default(1) @map("VERSION")
  settings         Setting[] // Existing relation to Setting
  roles            Role[]        @relation("USER_ROLES") // Many-to-many with roles
  overrideRequests OverrideLog[] @relation("OverrideRequests")

  @@map("USER")
}

model OverrideLog {
  id         Int      @id @default(autoincrement()) @map("ID")
  userId     Int      @map("USER_ID") // Cashier requesting
  approverId Int      @map("APPROVER_ID") // Manager approving
  action     String   @map("ACTION") // e.g., "void_item"
  reason     String?  @map("REASON") // Optional note
  createdAt  DateTime @default(now()) @map("CREATED_AT")
  user       User     @relation("OverrideRequests", fields: [userId], references: [id])

  @@map("OVERRIDE_LOG")
}

model Setting {
  id        Int         @id @default(autoincrement()) @map("ID")
  tenantId  Int?        @map("TENANT_ID") // Nullable, references Tenant in global DB
  userId    Int?        @map("USER_ID") // Nullable for user-specific settings
  outletId  Int?        @map("OUTLET_ID") // Nullable for outlet-specific settings
  key       String      @map("KEY") // e.g., "preferred_language"
  value     String      @map("VALUE") // Stores value as string
  type      SettingType @map("TYPE") // e.g., INT, STRING, BOOLEAN, JSON
  deleted   Boolean     @default(false) @map("IS_DELETED")
  deletedAt DateTime?   @map("DELETED_AT")
  createdAt DateTime?   @default(now()) @map("CREATED_AT")
  updatedAt DateTime?   @updatedAt @map("UPDATED_AT")
  version   Int?        @default(1) @map("VERSION")
  user      User?       @relation(fields: [userId], references: [id])
  outlet    Outlet?     @relation(fields: [outletId], references: [id])

  @@unique([tenantId, userId, outletId, key]) // Ensure uniqueness within scope
  @@index([key]) // Index for faster lookups
  @@map("SETTING")
}

model Referral {
  id         Int       @id @default(autoincrement()) @map("ID")
  userId     Int       @map("USER_ID")
  referralId Int       @map("REFERRAL_ID")
  deleted    Boolean   @default(false) @map("IS_DELETED")
  createdAt  DateTime? @default(now()) @map("CREATED_AT")
  updatedAt  DateTime? @updatedAt @map("UPDATED_AT")
  version    Int?      @default(1) @map("VERSION")

  @@map("REFERRAL")
}

model Supplier {
  id                      Int             @id @default(autoincrement()) @map("ID")
  companyName             String          @unique @map("COMPANY_NAME")
  companyStreet           String?         @map("COMPANY_STREET")
  companyCity             String?         @map("COMPANY_CITY")
  companyState            String?         @map("COMPANY_STATE")
  companyPostalCode       String?         @map("COMPANY_POSTAL_CODE")
  companyCountry          String?         @map("COMPANY_COUNTRY")
  companyRegisterNumber   String?         @map("COMPANY_REGISTRATION_NUMBER")
  personInChargeLastName  String?         @map("PERSON_IN_CHARGE_LAST_NAME")
  personInChargeFirstName String?         @map("PERSON_IN_CHARGE_FIRST_NAME")
  mobile                  String?         @map("MOBILE")
  email                   String?         @map("EMAIL")
  remark                  String?         @map("REMARK")
  hasTax                  Boolean         @map("HAS_TAX")
  deleted                 Boolean         @default(false) @map("IS_DELETED")
  deletedAt               DateTime?       @map("DELETED_AT")
  createdAt               DateTime?       @default(now()) @map("CREATED_AT")
  updatedAt               DateTime?       @updatedAt @map("UPDATED_AT")
  version                 Int?            @default(1) @map("VERSION")
  items                   Item[]
  purchaseOrders          PurchaseOrder[]
  invoices                Invoice[]

  @@index([companyName])
  @@map("SUPPLIER")
}

// Updated Customer model with promotion relations
model Customer {
  id             Int                 @id @default(autoincrement()) @map("ID")
  salutation     String              @default("") @map("SALUTATION")
  lastName       String              @map("LAST_NAME")
  firstName      String              @map("FIRST_NAME")
  mobile         String?             @map("MOBILE")
  email          String?             @map("EMAIL")
  gender         String?             @map("GENDER")
  billStreet     String?             @map("BILL_STREET")
  billCity       String?             @map("BILL_CITY")
  billState      String?             @map("BILL_STATE")
  billPostalCode String?             @map("BILL_POSTAL_CODE")
  billCountry    String?             @map("BILL_COUNTRY")
  billRemark     String?             @map("BILL_REMARK")
  shipStreet     String?             @map("SHIP_STREET")
  shipCity       String?             @map("SHIP_CITY")
  shipState      String?             @map("SHIP_STATE")
  shipPostalCode String?             @map("SHIP_POSTAL_CODE")
  shipCountry    String?             @map("SHIP_COUNTRY")
  shipRemark     String?             @map("SHIP_REMARK")
  deleted        Boolean             @default(false) @map("IS_DELETED")
  deletedAt      DateTime?           @map("DELETED_AT")
  createdAt      DateTime?           @default(now()) @map("CREATED_AT")
  updatedAt      DateTime?           @updatedAt @map("UPDATED_AT")
  version        Int?                @default(1) @map("VERSION")
  sales          Sales[]
  promotions     PromotionCustomer[]
  promotionUsage PromotionUsage[]
  reservations   Reservation[]
  waitlists      Waitlist[]
  splitBills     SplitBill[]

  @@map("CUSTOMER")
}

model Company {
  id                 Int       @id @default(autoincrement()) @map("ID")
  companyName        String    @default("") @map("COMPANY_NAME")
  street             String    @default("") @map("STREET")
  city               String    @default("") @map("CITY")
  state              String    @default("") @map("STATE")
  postalCode         String    @default("") @map("POSTAL_CODE")
  country            String    @default("") @map("COUNTRY")
  registrationNumber String    @unique @map("REGISTRATION_NUMBER")
  website            String    @default("") @map("WEBSITE")
  referralId         String    @default("") @map("REFERRAL_ID")
  deleted            Boolean   @default(false) @map("IS_DELETED")
  deletedAt          DateTime? @map("DELETED_AT")
  createdAt          DateTime? @default(now()) @map("CREATED_AT")
  updatedAt          DateTime? @updatedAt @map("UPDATED_AT")
  version            Int?      @default(1) @map("VERSION")

  @@map("COMPANY")
}

model Outlet {
  id             Int             @id @default(autoincrement()) @map("ID")
  tenantOutletId Int             @map("TENANT_OUTLET_ID")
  outletName     String          @map("OUTLET_NAME")
  street         String          @default("") @map("STREET")
  city           String          @default("") @map("CITY")
  state          String          @default("") @map("STATE")
  postalCode     String          @default("") @map("POSTAL_CODE")
  country        String          @default("") @map("COUNTRY")
  outletTel      String          @default("") @map("OUTLET_TEL")
  outletEmail    String          @default("") @map("OUTLET_EMAIL")
  deleted        Boolean         @default(false) @map("IS_DELETED")
  deletedAt      DateTime?       @map("DELETED_AT")
  createdAt      DateTime?       @default(now()) @map("CREATED_AT")
  updatedAt      DateTime?       @updatedAt @map("UPDATED_AT")
  version        Int?            @default(1) @map("VERSION")
  stockBalances  StockBalance[]
  stockMovements StockMovement[]
  stockSnapshots StockSnapshot[]
  stockReceipts  StockReceipt[]
  settings       Setting[] // Outlet-specific settings
  tables         Table[]
  stations       Station[]
  reservations   Reservation[]
  waitlists      Waitlist[]

  @@map("OUTLET")
}

model Item {
  id                 Int                 @id @default(autoincrement()) @map("ID")
  itemName           String              @map("ITEM_NAME")
  itemCode           String              @map("ITEM_CODE")
  itemType           String              @default("") @map("ITEM_TYPE")
  itemModel          String              @default("") @map("ITEM_MODEL")
  itemBrand          String              @default("") @map("ITEM_BRAND")
  itemDescription    String?             @default("") @map("ITEM_DESCRIPTION")
  categoryId         Int                 @map("CATEGORY_ID")
  cost               Decimal             @map("COST") @db.Decimal(15, 4)
  price              Decimal             @map("PRICE") @db.Decimal(15, 4)
  currency           String              @default("IDR") @map("CURRENCY")
  isOpenPrice        Boolean?            @default(false) @map("IS_OPEN_PRICE")
  unitOfMeasure      String              @default("") @map("UNIT_OF_MEASURE")
  height             Float?              @default(0) @map("HEIGHT")
  width              Float?              @default(0) @map("WIDTH")
  length             Float?              @default(0) @map("LENGTH")
  weight             Float?              @default(0) @map("WEIGHT")
  alternateLookUp    String?             @default("") @map("ALTERNATE_LOOKUP")
  image              String?             @default("") @map("IMAGE")
  hasTax             Boolean?            @map("HAS_TAX")
  taxRate            Float?              @map("TAX_RATE")
  supplierId         Int                 @map("SUPPLIER_ID")
  deleted            Boolean             @default(false) @map("IS_DELETED")
  deletedAt          DateTime?           @map("DELETED_AT")
  createdAt          DateTime?           @default(now()) @map("CREATED_AT")
  updatedAt          DateTime?           @updatedAt @map("UPDATED_AT")
  version            Int?                @default(1) @map("VERSION")
  category           Category            @relation(fields: [categoryId], references: [id])
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  stockBalance       StockBalance[]
  stockMovements     StockMovement[]
  stockSnapshots     StockSnapshot[]
  stockReceipts      StockReceipt[]
  recipes            Recipe[]
  purchaseOrderItems PurchaseOrderItem[]
  deliveryOrderItems DeliveryOrderItem[]
  invoiceItems       InvoiceItem[]

  @@index([createdAt])
  @@index([deletedAt])
  @@index([categoryId])
  @@index([updatedAt])
  @@index([supplierId])
  @@map("ITEM")
}

model Category {
  id          Int       @id @default(autoincrement()) @map("ID")
  name        String    @unique @map("NAME")
  description String?   @default("") @map("DESCRIPTION")
  parentId    Int?      @map("PARENT_ID")
  image       String?   @default("") @map("IMAGE")
  deleted     Boolean   @default(false) @map("IS_DELETED")
  deletedAt   DateTime? @map("DELETED_AT")
  createdAt   DateTime? @default(now()) @map("CREATED_AT")
  updatedAt   DateTime? @updatedAt @map("UPDATED_AT")
  version     Int?      @default(1) @map("VERSION")
  items       Item[]

  @@map("ITEM_CATEGORY")
}

model Sales {
  id                      Int           @id @default(autoincrement()) @map("ID")
  outletId                Int           @map("OUTLET_ID")
  businessDate            DateTime      @map("BUSINESS_DATE")
  salesType               String        @map("SALES_TYPE")
  customerName            String?       @default("") @map("CUSTOMER_NAME")
  customerId              Int?          @map("CUSTOMER_ID")
  phoneNumber             String?       @default("") @map("PHONE_NUMBER")
  billStreet              String        @default("") @map("BILL_STREET")
  billCity                String        @default("") @map("BILL_CITY")
  billState               String        @default("") @map("BILL_STATE")
  billPostalCode          String        @default("") @map("BILL_POSTAL_CODE")
  billCountry             String        @default("") @map("BILL_COUNTRY")
  shipStreet              String        @default("") @map("SHIP_STREET")
  shipCity                String        @default("") @map("SHIP_CITY")
  shipState               String        @default("") @map("SHIP_STATE")
  shipPostalCode          String        @default("") @map("SHIP_POSTAL_CODE")
  shipCountry             String        @default("") @map("SHIP_COUNTRY")
  totalItemDiscountAmount Decimal       @default(0) @map("TOTAL_ITEM_DISCOUNT_AMOUNT") @db.Decimal(15, 4)
  discountPercentage      Decimal       @default(0) @map("DISCOUNT_PERCENTAGE") @db.Decimal(15, 4)
  discountAmount          Decimal       @default(0) @map("DISCOUNT_AMOUNT") @db.Decimal(15, 4)
  profitAmount            Decimal       @map("PROFIT_AMOUNT") @db.Decimal(15, 4)
  serviceChargeAmount     Decimal       @default(0) @map("SERVICE_CHARGE_AMOUNT") @db.Decimal(15, 4)
  taxAmount               Decimal       @default(0) @map("TAX_AMOUNT") @db.Decimal(15, 4)
  roundingAmount          Decimal       @default(0) @map("ROUNDING_AMOUNT") @db.Decimal(15, 4)
  subtotalAmount          Decimal       @map("SUBTOTAL_AMOUNT") @db.Decimal(15, 4)
  totalAmount             Decimal       @map("TOTAL_AMOUNT") @db.Decimal(15, 4)
  paidAmount              Decimal       @default(0) @map("PAID_AMOUNT") @db.Decimal(15, 4)
  changeAmount            Decimal       @default(0) @map("CHANGE_AMOUNT") @db.Decimal(15, 4)
  status                  String        @map("STATUS")
  remark                  String        @default("") @map("REMARK")
  completedSessionId      Int?          @map("COMPLETED_SESSION_ID")
  sessionId               Int           @map("SESSION_ID")
  eodId                   Int           @map("EOD_ID")
  salesQuotationId        Int           @default(0) @map("SALES_QUOTATION_ID")
  performedBy             String?       @default("") @map("PERFORMED_BY")
  deleted                 Boolean       @default(false) @map("IS_DELETED")
  deletedAt               DateTime?     @map("DELETED_AT")
  createdAt               DateTime?     @default(now()) @map("CREATED_AT")
  updatedAt               DateTime?     @updatedAt @map("UPDATED_AT")
  version                 Int?          @default(1) @map("VERSION")
  tableId                 Int?          @map("TABLE_ID")
  orderStatus             String?       @map("ORDER_STATUS")
  salesItems              SalesItem[]
  payments                Payment[]
  registerLogs            RegisterLog[]
  customer                Customer?     @relation(fields: [customerId], references: [id])
  table                   Table?        @relation(fields: [tableId], references: [id])

  @@index([businessDate])
  @@index([outletId])
  @@index([sessionId, completedSessionId])
  @@map("SALES")
}

model SalesItem {
  id                  Int                 @id @default(autoincrement()) @map("ID")
  salesId             Int                 @map("SALES_ID")
  itemId              Int                 @map("ITEM_ID")
  itemName            String              @map("ITEM_NAME")
  itemCode            String              @map("ITEM_CODE")
  itemBrand           String              @map("ITEM_BRAND")
  itemModel           String              @default("") @map("ITEM_MODEL")
  quantity            Decimal             @map("QUANTITY") @db.Decimal(15, 4)
  cost                Decimal             @map("COST") @db.Decimal(15, 4)
  price               Decimal             @map("PRICE") @db.Decimal(15, 4)
  priceBeforeTax      Decimal             @map("PRICE_BEFORE_TAX") @db.Decimal(15, 4)
  profit              Decimal             @map("PROFIT") @db.Decimal(15, 4)
  discountPercentage  Decimal             @default(0) @map("DISCOUNT_PERCENTAGE") @db.Decimal(15, 4)
  discountAmount      Decimal             @default(0) @map("DISCOUNT_AMOUNT") @db.Decimal(15, 4)
  serviceChargeAmount Decimal             @default(0) @map("SERVICE_CHARGE_AMOUNT") @db.Decimal(15, 4)
  taxAmount           Decimal             @default(0) @map("TAX_AMOUNT") @db.Decimal(15, 4)
  subtotalAmount      Decimal             @map("SUBTOTAL_AMOUNT") @db.Decimal(15, 4)
  remark              String              @default("") @map("REMARK")
  deleted             Boolean             @default(false) @map("IS_DELETED")
  createdAt           DateTime?           @default(now()) @map("CREATED_AT")
  updatedAt           DateTime?           @updatedAt @map("UPDATED_AT")
  version             Int?                @default(1) @map("VERSION")
  specialInstructions String?             @default("") @map("SPECIAL_INSTRUCTIONS")
  itemStatus          String?             @map("ITEM_STATUS")
  priority            String?             @map("PRIORITY") // e.g., "NORMAL", "RUSH"
  estimatedPrepTime   Int?                @map("ESTIMATED_PREP_TIME") // In minutes
  sales               Sales               @relation(fields: [salesId], references: [id])
  selectedModifiers   SalesItemModifier[]
  orderRouting        OrderRouting[]

  @@index([itemStatus])
  @@index([itemId])
  @@index([quantity])
  @@index([profit])
  @@map("SALES_ITEM")
}

model SalesItemModifier {
  id                 Int              @id @default(autoincrement()) @map("ID")
  salesItemId        Int              @map("SALES_ITEM_ID")
  menuItemModifierId Int              @map("MENU_ITEM_MODIFIER_ID")
  itemId             Int?             @map("ITEM_ID") // For inventory tracking
  modifierName       String           @map("MODIFIER_NAME")
  modifierPrice      Decimal          @map("MODIFIER_PRICE") @db.Decimal(15, 4)
  quantity           Int              @default(1) @map("QUANTITY")
  status             OrderStatus?     @map("STATUS") // Optional, for preparation tracking
  deleted            Boolean          @default(false) @map("IS_DELETED")
  deletedAt          DateTime?        @map("DELETED_AT")
  createdAt          DateTime?        @default(now()) @map("CREATED_AT")
  updatedAt          DateTime?        @updatedAt @map("UPDATED_AT")
  version            Int?             @default(1) @map("VERSION")
  menuItemModifier   MenuItemModifier @relation(fields: [menuItemModifierId], references: [id])
  salesItem          SalesItem        @relation(fields: [salesItemId], references: [id])

  @@index([salesItemId])
  @@index([menuItemModifierId])
  @@index([itemId])
  @@map("SALES_ITEM_MODIFIER")
}

model SalesQuotation {
  id                  Int                  @id @default(autoincrement()) @map("ID")
  outletId            Int                  @map("OUTLET_ID")
  customerId          Int?                 @map("CUSTOMER_ID")
  customerStreet      String?              @map("CUSTOMER_STREET")
  customerCity        String?              @map("CUSTOMER_CITY")
  customerState       String?              @map("CUSTOMER_STATE")
  customerPostalCode  String?              @map("CUSTOMER_POSTAL_CODE")
  customerCountry     String?              @map("CUSTOMER_COUNTRY")
  discountPercentage  Decimal              @default(0) @map("DISCOUNT_PERCENTAGE") @db.Decimal(15, 4)
  discountAmount      Decimal              @map("DISCOUNT_AMOUNT") @db.Decimal(15, 4)
  serviceChargeAmount Decimal              @map("SERVICE_CHARGE_AMOUNT") @db.Decimal(15, 4)
  taxAmount           Decimal              @map("TAX_AMOUNT") @db.Decimal(15, 4)
  roundingAmount      Decimal              @map("ROUNDING_AMOUNT") @db.Decimal(15, 4)
  subtotalAmount      Decimal              @map("SUBTOTAL_AMOUNT") @db.Decimal(15, 4)
  totalAmount         Decimal              @map("TOTAL_AMOUNT")
  status              String               @map("STATUS")
  remark              String?              @map("REMARK")
  performedBy         String?              @default("") @map("PERFORMED_BY")
  deleted             Boolean              @default(false) @map("IS_DELETED")
  deletedAt           DateTime?            @map("DELETED_AT")
  createdAt           DateTime?            @default(now()) @map("CREATED_AT")
  updatedAt           DateTime?            @updatedAt @map("UPDATED_AT")
  version             Int?                 @default(1) @map("VERSION")
  salesQuotationItems SalesQuotationItem[]

  @@map("SALES_QUOTATION")
}

model SalesQuotationItem {
  id               Int            @id @default(autoincrement()) @map("ID")
  salesQuotationId Int            @map("SALES_QUOTATION_ID")
  itemId           Int            @map("ITEM_ID")
  quantity         Decimal        @map("QUANTITY") @db.Decimal(15, 4)
  remark           String?        @map("REMARK")
  deleted          Boolean        @default(false) @map("IS_DELETED")
  createdAt        DateTime?      @default(now()) @map("CREATED_AT")
  updatedAt        DateTime?      @updatedAt @map("UPDATED_AT")
  version          Int?           @default(1) @map("VERSION")
  salesQuotation   SalesQuotation @relation(fields: [salesQuotationId], references: [id])

  @@map("SALES_QUOTATION_ITEM")
}

model Invoice {
  id               Int             @id @default(autoincrement()) @map("ID")
  invoiceNumber    String          @unique @map("INVOICE_NUMBER")
  taxInvoiceNumber String          @map("TAX_INVOICE_NUMBER")
  purchaseOrderId  Int?            @map("PURCHASE_ORDER_ID")
  supplierId       Int?            @map("SUPPLIER_ID")
  outletId         Int             @map("OUTLET_ID")
  subtotalAmount   Decimal         @map("SUBTOTAL_AMOUNT") @db.Decimal(15, 4)
  taxAmount        Decimal         @map("TAX_AMOUNT") @db.Decimal(15, 4)
  sessionId        Int?            @map("SESSION_ID") // Optional for backwards compatibility
  discountType     String?         @default("") @map("DISCOUNT_TYPE") // e.g., "PERCENTAGE", "FIXED_AMOUNT"
  discountAmount   Decimal         @map("DISCOUNT_AMOUNT") @db.Decimal(15, 4)
  totalAmount      Decimal         @map("TOTAL_AMOUNT") @db.Decimal(15, 4)
  currency         String          @map("CURRENCY")
  status           String          @map("STATUS")
  invoiceDate      DateTime?       @map("INVOICE_DATE")
  paymentDate      DateTime?       @map("PAYMENT_DATE")
  dueDate          DateTime?       @map("DUE_DATE")
  remark           String?         @default("") @map("REMARK")
  performedBy      String?         @default("") @map("PERFORMED_BY")
  deleted          Boolean         @default(false) @map("IS_DELETED")
  deletedAt        DateTime?       @map("DELETED_AT")
  createdAt        DateTime?       @default(now()) @map("CREATED_AT")
  updatedAt        DateTime?       @updatedAt @map("UPDATED_AT")
  version          Int?            @default(1) @map("VERSION")
  session          Session?        @relation(fields: [sessionId], references: [id])
  purchaseOrder    PurchaseOrder?  @relation(fields: [purchaseOrderId], references: [id])
  supplier         Supplier?       @relation(fields: [supplierId], references: [id])
  invoiceItems     InvoiceItem[]
  deliveryOrders   DeliveryOrder[] // One-to-many relation with DeliveryOrder

  @@index([purchaseOrderId])
  @@index([supplierId])
  @@index([outletId])
  @@index([createdAt, updatedAt, deletedAt])
  @@map("INVOICE")
}

model InvoiceItem {
  id             Int       @id @default(autoincrement()) @map("ID")
  invoiceId      Int       @map("INVOICE_ID")
  itemId         Int       @map("ITEM_ID")
  quantity       Decimal   @map("QUANTITY") @db.Decimal(15, 4)
  unitPrice      Decimal   @map("UNIT_PRICE") @db.Decimal(15, 4)
  discountType   String?   @default("") @map("DISCOUNT_TYPE") // e.g., "PERCENTAGE", "FIXED_AMOUNT"
  discountAmount Decimal?  @default(0) @map("DISCOUNT_AMOUNT")
  taxAmount      Decimal?  @map("TAX_AMOUNT") @db.Decimal(15, 4)
  subtotal       Decimal   @map("SUBTOTAL") @db.Decimal(15, 4)
  remark         String?   @default("") @map("REMARK")
  createdAt      DateTime? @default(now()) @map("CREATED_AT")
  updatedAt      DateTime? @map("UPDATED_AT")
  deleted        Boolean   @default(false) @map("IS_DELETED")
  deletedAt      DateTime? @map("DELETED_AT")
  version        Int?      @default(1) @map("VERSION")
  invoice        Invoice   @relation(fields: [invoiceId], references: [id])
  item           Item      @relation(fields: [itemId], references: [id])

  @@index([invoiceId])
  @@index([itemId])
  @@map("INVOICE_ITEM")
}

model DeliveryOrder {
  id                 Int                 @id @default(autoincrement()) @map("ID")
  trackingNumber     String?             @map("TRACKING_NUMBER")
  outletId           Int                 @map("OUTLET_ID")
  customerId         Int?                @map("CUSTOMER_ID")
  purchaseOrderId    Int?                @map("PURCHASE_ORDER_ID")
  supplierId         Int?                @map("SUPPLIER_ID")
  invoiceId          Int?                @map("INVOICE_ID") // Foreign key to 
  sessionId          Int?                @map("SESSION_ID") // Optional for backwards compatibility
  deliveryDate       DateTime?           @map("DELIVERY_DATE")
  deliveryStreet     String?             @map("DELIVERY_STREET")
  deliveryCity       String?             @map("DELIVERY_CITY")
  deliveryState      String?             @map("DELIVERY_STATE")
  deliveryPostalCode String?             @map("DELIVERY_POSTAL_CODE")
  deliveryCountry    String?             @map("DELIVERY_COUNTRY")
  status             String              @map("STATUS")
  remark             String?             @map("REMARK")
  performedBy        String?             @default("") @map("PERFORMED_BY")
  deleted            Boolean             @default(false) @map("IS_DELETED")
  deletedAt          DateTime?           @map("DELETED_AT")
  createdAt          DateTime?           @default(now()) @map("CREATED_AT")
  updatedAt          DateTime?           @updatedAt @map("UPDATED_AT")
  version            Int?                @default(1) @map("VERSION")
  session            Session?            @relation(fields: [sessionId], references: [id])
  purchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  invoice            Invoice?            @relation(fields: [invoiceId], references: [id]) // One-to-many relation
  deliveryOrderItems DeliveryOrderItem[]

  @@index([outletId])
  @@index([customerId])
  @@index([purchaseOrderId])
  @@index([invoiceId, supplierId])
  @@index([createdAt, updatedAt, deletedAt])
  @@map("DELIVERY_ORDER")
}

model DeliveryOrderItem {
  id               Int           @id @default(autoincrement()) @map("ID")
  deliveryOrderId  Int           @map("DELIVERY_ORDER_ID")
  itemId           Int           @map("ITEM_ID")
  orderedQuantity  Float         @map("ORDERED_QUANTITY")
  receivedQuantity Float         @map("RECEIVED_QUANTITY")
  unitPrice        Decimal?      @default(0) @map("UNIT_PRICE") @db.Decimal(15, 4)
  deliveryFee      Decimal?      @default(0) @map("DELIVERY_FEE") @db.Decimal(15, 4)
  remark           String?       @default("") @map("REMARK")
  version          Int?          @default(1) @map("VERSION")
  createdAt        DateTime?     @default(now()) @map("CREATED_AT")
  updatedAt        DateTime?     @updatedAt @map("UPDATED_AT")
  deleted          Boolean       @default(false) @map("IS_DELETED")
  deletedAt        DateTime?     @map("DELETED_AT")
  deliveryOrder    DeliveryOrder @relation(fields: [deliveryOrderId], references: [id])
  item             Item          @relation(fields: [itemId], references: [id])

  @@index([deliveryOrderId])
  @@index([itemId])
  @@map("DELIVERY_ORDER_ITEM")
}

model PurchaseOrder {
  id                  Int                 @id @default(autoincrement()) @map("ID")
  purchaseOrderNumber String              @unique @map("PURCHASE_ORDER_NUMBER")
  outletId            Int                 @map("OUTLET_ID")
  supplierId          Int                 @map("SUPPLIER_ID")
  purchaseOrderDate   DateTime?           @map("PURCHASE_ORDER_DATE")
  sessionId           Int?                @map("SESSION_ID") // Optional for backwards compatibility
  discountType        String?             @default("") @map("DISCOUNT_TYPE") // e.g., "PERCENTAGE", "FIXED_AMOUNT"
  discountAmount      Decimal?            @map("DISCOUNT_AMOUNT") @db.Decimal(15, 4)
  serviceChargeAmount Decimal?            @map("SERVICE_CHARGE_AMOUNT") @db.Decimal(15, 4)
  taxAmount           Decimal?            @map("TAX_AMOUNT") @db.Decimal(15, 4)
  roundingAmount      Decimal?            @map("ROUNDING_AMOUNT") @db.Decimal(15, 4)
  subtotalAmount      Decimal?            @map("SUBTOTAL_AMOUNT") @db.Decimal(15, 4)
  totalAmount         Decimal?            @map("TOTAL_AMOUNT") @db.Decimal(15, 4)
  status              String              @map("STATUS")
  remark              String?             @map("REMARK")
  currency            String              @default("IDR") @map("CURRENCY")
  performedBy         String?             @default("") @map("PERFORMED_BY")
  deleted             Boolean             @default(false) @map("IS_DELETED")
  deletedAt           DateTime?           @map("DELETED_AT")
  createdAt           DateTime?           @default(now()) @map("CREATED_AT")
  updatedAt           DateTime?           @updatedAt @map("UPDATED_AT")
  version             Int?                @default(1) @map("VERSION")
  session             Session?            @relation(fields: [sessionId], references: [id])
  supplier            Supplier            @relation(fields: [supplierId], references: [id])
  purchaseOrderItems  PurchaseOrderItem[]
  deliveryOrders      DeliveryOrder[]
  invoices            Invoice[]

  @@index([supplierId])
  @@index([outletId])
  @@index([createdAt, updatedAt, deletedAt])
  @@map("PURCHASE_ORDER")
}

model PurchaseOrderItem {
  id              Int           @id @default(autoincrement()) @map("ID")
  purchaseOrderId Int           @map("PURCHASE_ORDER_ID")
  itemId          Int           @map("ITEM_ID")
  quantity        Decimal       @map("QUANTITY") @db.Decimal(15, 4)
  taxAmount       Decimal?      @map("TAX_AMOUNT") @db.Decimal(15, 4)
  discountType    String?       @default("") @map("DISCOUNT_TYPE") // e.g., "PERCENTAGE", "FIXED_AMOUNT"
  discountAmount  Decimal?      @default(0) @map("DISCOUNT_AMOUNT")
  unitPrice       Decimal       @map("UNIT_PRICE") @db.Decimal(15, 4)
  subtotal        Decimal       @map("SUBTOTAL") @db.Decimal(15, 4)
  remark          String?       @default("") @map("REMARK")
  version         Int?          @default(1) @map("VERSION")
  createdAt       DateTime?     @default(now()) @map("CREATED_AT")
  updatedAt       DateTime?     @map("UPDATED_AT")
  deleted         Boolean       @default(false) @map("IS_DELETED")
  deletedAt       DateTime?     @map("DELETED_AT")
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  item            Item          @relation(fields: [itemId], references: [id])

  @@index([purchaseOrderId])
  @@index([itemId])
  @@map("PURCHASE_ORDER_ITEM")
}

model Payment {
  id             Int         @id @default(autoincrement()) @map("ID")
  method         String      @map("PAYMENT")
  tenderedAmount Decimal     @map("TENDERED_AMOUNT") @db.Decimal(15, 4)
  paidAmount     Decimal     @map("PAID_AMOUNT") @db.Decimal(15, 4)
  currencySymbol String      @default("") @map("CURRENCY_SYMBOL")
  salesId        Int         @map("SALES_ID")
  reference      String      @default("") @map("REFERENCE")
  remark         String      @default("") @map("REMARK")
  businessDate   DateTime    @map("BUSINESS_DATE")
  status         String      @map("STATUS")
  outletId       Int         @map("OUTLET_ID")
  sessionId      Int         @map("SESSION_ID")
  eodId          Int         @map("EOD_ID")
  performedBy    String?     @default("") @map("PERFORMED_BY")
  deleted        Boolean     @default(false) @map("IS_DELETED")
  deletedAt      DateTime?   @map("DELETED_AT")
  createdAt      DateTime?   @default(now()) @map("CREATED_AT")
  updatedAt      DateTime?   @updatedAt @map("UPDATED_AT")
  version        Int?        @default(1) @map("VERSION")
  cardInfos      CardInfo[]
  sales          Sales       @relation(fields: [salesId], references: [id])
  splitBills     SplitBill[]

  @@index([method])
  @@index([businessDate])
  @@map("PAYMENT")
}

model RegisterLog {
  id             Int       @id @default(autoincrement()) @map("ID")
  type           String    @map("TYPE")
  modifiedAmount Decimal   @map("MODIFIED_AMOUNT") @db.Decimal(15, 4)
  currencySymbol String    @default("") @map("CURRENCY_SYMBOL")
  salesId        Int       @map("SALES_ID")
  remark         String    @default("") @map("REMARK")
  status         String    @map("STATUS")
  outletId       Int       @map("OUTLET_ID")
  sessionId      Int       @map("SESSION_ID")
  eodId          Int       @map("EOD_ID")
  performedBy    String?   @default("") @map("PERFORMED_BY")
  deleted        Boolean   @default(false) @map("IS_DELETED")
  createdAt      DateTime? @default(now()) @map("CREATED_AT")
  updatedAt      DateTime? @updatedAt @map("UPDATED_AT")
  version        Int?      @default(1) @map("VERSION")
  sales          Sales     @relation(fields: [salesId], references: [id])

  @@map("REGISTER_LOG")
}

model CardInfo {
  id          Int       @id @default(autoincrement()) @map("ID")
  paymentId   Int       @map("PAYMENT_ID")
  cardNumber  String?   @map("CARD_NUMBER")
  cardExpiry  String?   @map("CARD_EXPIRY")
  traceNumber String?   @map("TRACE_NUMBER")
  type2       String?   @map("TYPE_2")
  type3       String?   @map("TYPE_3")
  cardRate    Float?    @map("CARD_RATE")
  appCode     String?   @map("APP_CODE")
  cardType    String?   @map("CARD_TYPE")
  deleted     Boolean   @default(false) @map("IS_DELETED")
  createdAt   DateTime? @default(now()) @map("CREATED_AT")
  updatedAt   DateTime? @updatedAt @map("UPDATED_AT")
  version     Int?      @default(1) @map("VERSION")
  payment     Payment   @relation(fields: [paymentId], references: [id])

  @@map("CARD_INFO")
}

model Session {
  id              Int             @id @default(autoincrement()) @map("ID")
  outletId        Int             @map("OUTLET_ID")
  businessDate    DateTime        @map("BUSINESS_DATE")
  openingDateTime DateTime?       @map("OPENING_DATE_TIME")
  closingDateTime DateTime?       @map("CLOSING_DATE_TIME")
  openingAmount   Decimal         @map("OPENING_AMOUNT") @db.Decimal(15, 4)
  totalSalesCount Int             @map("TOTAL_SALES_COUNT")
  openByUserID    Int             @map("OPEN_BY_USER_ID")
  closeByUserID   Int             @map("CLOSE_BY_USER_ID")
  deleted         Boolean         @default(false) @map("IS_DELETED")
  deletedAt       DateTime?       @map("DELETED_AT")
  createdAt       DateTime?       @default(now()) @map("CREATED_AT")
  updatedAt       DateTime?       @updatedAt @map("UPDATED_AT")
  version         Int?            @default(1) @map("VERSION")
  declarations    Declaration[]
  purchaseOrders  PurchaseOrder[]
  deliveryOrders  DeliveryOrder[]
  invoices        Invoice[]

  @@map("SESSION")
}

model Declaration {
  id                 Int       @id @default(autoincrement()) @map("ID")
  paymentType        String    @map("PAYMENT_TYPE")
  totalPaymentAmount Decimal   @map("TOTAL_PAYMENT_AMOUNT") @db.Decimal(15, 4)
  declarationAmount  Decimal   @map("DECLARATION_AMOUNT") @db.Decimal(15, 4)
  differenceAmount   Decimal   @map("DIFFERENCE_AMOUNT") @db.Decimal(15, 4)
  deleted            Boolean   @default(false) @map("IS_DELETED")
  deletedAt          DateTime? @map("DELETED_AT")
  createdAt          DateTime? @default(now()) @map("CREATED_AT")
  updatedAt          DateTime? @updatedAt @map("UPDATED_AT")
  version            Int?      @default(1) @map("VERSION")
  sessionID          Int       @map("SESSION_ID")
  session            Session   @relation(fields: [sessionID], references: [id])

  @@map("DECLARATION")
}

model StockBalance {
  id                Int       @id @default(autoincrement()) @map("ID")
  itemId            Int       @map("ITEM_ID")
  outletId          Int       @map("OUTLET_ID")
  availableQuantity Decimal   @map("AVAILABLE_QUANTITY") @db.Decimal(15, 4)
  onHandQuantity    Decimal   @map("ON_HAND_QUANTITY") @db.Decimal(15, 4)
  reorderThreshold  Decimal?  @map("REORDER_THRESHOLD") @db.Decimal(15, 4)
  deleted           Boolean   @default(false) @map("IS_DELETED")
  lastRestockDate   DateTime? @map("LAST_RESTOCK_DATE")
  deletedAt         DateTime? @map("DELETED_AT")
  createdAt         DateTime? @default(now()) @map("CREATED_AT")
  updatedAt         DateTime? @updatedAt @map("UPDATED_AT")
  version           Int?      @default(1) @map("VERSION")
  item              Item      @relation(fields: [itemId], references: [id])
  outlet            Outlet    @relation(fields: [outletId], references: [id])

  @@unique([itemId, outletId, reorderThreshold, deleted, availableQuantity])
  @@map("STOCK_BALANCE")
}

model StockReceipt {
  id          Int       @id @default(autoincrement()) @map("ID")
  itemId      Int       @map("ITEM_ID")
  outletId    Int       @map("OUTLET_ID")
  quantity    Decimal   @map("QUANTITY") @db.Decimal(15, 4)
  cost        Decimal   @map("COST") @db.Decimal(15, 4) // Cost at the time of this receipt
  receiptDate DateTime  @default(now()) @map("RECEIPT_DATE")
  createdAt   DateTime? @default(now()) @map("CREATED_AT")
  updatedAt   DateTime? @updatedAt @map("UPDATED_AT")
  deleted     Boolean   @default(false) @map("IS_DELETED")
  deletedAt   DateTime? @map("DELETED_AT")
  version     Int?      @default(1) @map("VERSION")
  item        Item      @relation(fields: [itemId], references: [id])
  outlet      Outlet    @relation(fields: [outletId], references: [id])

  @@map("STOCK_RECEIPT")
}

model StockReceiptArchive {
  id          Int       @id @default(autoincrement()) @map("ID")
  itemId      Int       @map("ITEM_ID")
  outletId    Int       @map("OUTLET_ID")
  quantity    Decimal   @map("QUANTITY") @db.Decimal(15, 4)
  cost        Decimal   @map("COST") @db.Decimal(15, 4)
  receiptDate DateTime  @map("RECEIPT_DATE")
  createdAt   DateTime? @default(now()) @map("CREATED_AT")
  updatedAt   DateTime? @updatedAt @map("UPDATED_AT")
  deleted     Boolean   @default(false) @map("IS_DELETED")
  deletedAt   DateTime? @map("DELETED_AT")
  version     Int?      @default(1) @map("VERSION")

  @@index([itemId, receiptDate])
  @@index([outletId])
  @@map("STOCK_RECEIPT_ARCHIVE")
}

model StockMovement {
  id                        Int       @id @default(autoincrement()) @map("ID")
  itemId                    Int       @map("ITEM_ID")
  outletId                  Int       @map("OUTLET_ID")
  previousAvailableQuantity Decimal   @map("PREVIOUS_AVAILABLE_QUANTITY") @db.Decimal(15, 4)
  previousOnHandQuantity    Decimal   @map("PREVIOUS_ON_HAND_QUANTITY") @db.Decimal(15, 4)
  availableQuantityDelta    Decimal   @map("AVAILABLE_QUANTITY_DELTA") @db.Decimal(15, 4)
  onHandQuantityDelta       Decimal   @map("ON_HAND_QUANTITY_DELTA") @db.Decimal(15, 4)
  movementType              String    @map("MOVEMENT_TYPE")
  documentId                Int       @map("DOCUMENT_ID")
  reason                    String    @map("REASON")
  remark                    String    @default("") @map("REMARK")
  deleted                   Boolean   @default(false) @map("IS_DELETED")
  createdAt                 DateTime? @default(now()) @map("CREATED_AT")
  updatedAt                 DateTime? @updatedAt @map("UPDATED_AT")
  version                   Int?      @default(1) @map("VERSION")
  performedBy               String?   @default("") @map("PERFORMED_BY")
  item                      Item      @relation(fields: [itemId], references: [id])
  outlet                    Outlet    @relation(fields: [outletId], references: [id])

  @@index([itemId, createdAt])
  @@index([outletId])
  @@index([movementType])
  @@index([deleted])
  @@map("STOCK_MOVEMENT")
}

model StockMovementArchive {
  id                        Int       @id @default(autoincrement()) @map("ID")
  itemId                    Int       @map("ITEM_ID")
  itemCode                  String    @map("ITEM_CODE")
  itemName                  String    @map("ITEM_NAME")
  outletId                  Int       @map("OUTLET_ID")
  outletName                String    @map("OUTLET_NAME")
  previousAvailableQuantity Decimal   @map("PREVIOUS_AVAILABLE_QUANTITY") @db.Decimal(15, 4)
  previousOnHandQuantity    Decimal   @map("PREVIOUS_ON_HAND_QUANTITY") @db.Decimal(15, 4)
  availableQuantityDelta    Decimal   @map("AVAILABLE_QUANTITY_DELTA") @db.Decimal(15, 4)
  onHandQuantityDelta       Decimal   @map("ON_HAND_QUANTITY_DELTA") @db.Decimal(15, 4)
  movementType              String    @map("MOVEMENT_TYPE")
  documentId                Int       @map("DOCUMENT_ID")
  documentType              String    @map("DOCUMENT_TYPE")
  reason                    String    @map("REASON")
  remark                    String    @default("") @map("REMARK")
  deleted                   Boolean   @default(false) @map("IS_DELETED")
  createdAt                 DateTime? @default(now()) @map("CREATED_AT")
  updatedAt                 DateTime? @updatedAt @map("UPDATED_AT")
  version                   Int?      @default(1) @map("VERSION")

  @@index([itemId, createdAt])
  @@index([outletId])
  @@index([movementType])
  @@map("STOCK_MOVEMENT_ARCHIVE")
}

model StockSnapshot {
  id                Int       @id @default(autoincrement()) @map("ID")
  itemId            Int       @map("ITEM_ID")
  outletId          Int       @map("OUTLET_ID")
  availableQuantity Decimal   @map("AVAILABLE_QUANTITY") @db.Decimal(15, 4)
  onHandQuantity    Decimal   @map("ON_HAND_QUANTITY") @db.Decimal(15, 4)
  deleted           Boolean   @default(false) @map("IS_DELETED")
  deletedAt         DateTime? @map("DELETED_AT")
  createdAt         DateTime? @default(now()) @map("CREATED_AT")
  updatedAt         DateTime? @updatedAt @map("UPDATED_AT")
  version           Int?      @default(1) @map("VERSION")
  item              Item      @relation(fields: [itemId], references: [id])
  outlet            Outlet    @relation(fields: [outletId], references: [id])

  @@index([itemId, createdAt])
  @@index([outletId])
  @@map("STOCK_SNAPSHOT")
}

model MenuProfileOutlet {
  id            Int       @id @default(autoincrement()) @map("ID")
  outletId      Int       @map("OUTLET_ID")
  menuProfileID Int       @map("MENU_PROFILE_ID")
  deleted       Boolean   @default(false) @map("IS_DELETED")
  deletedAt     DateTime? @map("DELETED_AT")
  createdAt     DateTime? @default(now()) @map("CREATED_AT")
  updatedAt     DateTime? @updatedAt @map("UPDATED_AT")
  version       Int?      @default(1) @map("VERSION")

  @@map("MENU_PROFILE_OUTLET")
}

model MenuProfile {
  id             Int            @id @default(autoincrement()) @map("ID")
  name           String         @map("NAME")
  dateStart      String         @map("DATE_START")
  dateEnd        String         @map("DATE_END")
  timeStart      String         @map("TIME_START")
  timeEnd        String         @map("TIME_END")
  isMonday       Boolean        @map("IS_MONDAY")
  isTuesday      Boolean        @map("IS_TUESDAY")
  isWednesday    Boolean        @map("IS_WEDNESDAY")
  isThursday     Boolean        @map("IS_THURSDAY")
  isFriday       Boolean        @map("IS_FRIDAY")
  isSaturday     Boolean        @map("IS_SATURDAY")
  isSunday       Boolean        @map("IS_SUNDAY")
  sequence       Int            @map("SEQUENCE")
  deleted        Boolean        @default(false) @map("IS_DELETED")
  deletedAt      DateTime?      @map("DELETED_AT")
  createdAt      DateTime?      @default(now()) @map("CREATED_AT")
  updatedAt      DateTime?      @updatedAt @map("UPDATED_AT")
  version        Int?           @default(1) @map("VERSION")
  menuCategories MenuCategory[]

  @@map("MENU_PROFILE")
}

model MenuCategory {
  id            Int         @id @default(autoincrement()) @map("ID")
  name          String      @map("NAME")
  menuProfileID Int         @map("MENU_PROFILE_ID")
  imageURL      String?     @map("IMAGE_URL") @db.Text
  deleted       Boolean     @default(false) @map("IS_DELETED")
  deletedAt     DateTime?   @map("DELETED_AT")
  createdAt     DateTime?   @default(now()) @map("CREATED_AT")
  updatedAt     DateTime?   @updatedAt @map("UPDATED_AT")
  version       Int?        @default(1) @map("VERSION")
  menuProfile   MenuProfile @relation(fields: [menuProfileID], references: [id])
  menuItems     MenuItem[]

  @@map("MENU_CATEGORY")
}

model MenuItem {
  id                     Int                     @id @default(autoincrement()) @map("ID")
  name                   String                  @map("NAME")
  itemID                 Int                     @map("ITEM_ID")
  itemCode               String                  @map("ITEM_CODE")
  imageURL               String?                 @map("IMAGE_URL") @db.Text
  price                  Decimal                 @map("PRICE") @db.Decimal(15, 4)
  sequence               Int                     @map("SEQUENCE")
  menuCategoryID         Int                     @map("MENU_CATEGORY_ID")
  deleted                Boolean                 @default(false) @map("IS_DELETED")
  deletedAt              DateTime?               @map("DELETED_AT")
  createdAt              DateTime?               @default(now()) @map("CREATED_AT")
  updatedAt              DateTime?               @updatedAt @map("UPDATED_AT")
  version                Int?                    @default(1) @map("VERSION")
  menuCategory           MenuCategory            @relation(fields: [menuCategoryID], references: [id])
  menuItemModifierGroups MenuItemModifierGroup[]
  recipes                Recipe[]

  @@map("MENU_ITEM")
}

model MenuItemModifierGroup {
  id                Int                @id @default(autoincrement()) @map("ID")
  name              String             @map("NAME")
  minSelection      Int                @map("MIN_SELECTION")
  maxSelection      Int                @map("MAX_SELECTION")
  sequence          Int                @map("SEQUENCE")
  menuItemID        Int                @map("MENU_ITEM_ID")
  deleted           Boolean            @default(false) @map("IS_DELETED")
  deletedAt         DateTime?          @map("DELETED_AT")
  createdAt         DateTime?          @default(now()) @map("CREATED_AT")
  updatedAt         DateTime?          @map("UPDATED_AT")
  version           Int?               @default(1) @map("VERSION")
  menuItem          MenuItem           @relation(fields: [menuItemID], references: [id])
  freeModifierLimit Int?               @map("FREE_MODIFIER_LIMIT") // e.g., first 2 modifiers free
  menuItemModifiers MenuItemModifier[]

  @@map("MENU_ITEM_MODIFIER_GROUP")
}

model MenuItemModifier {
  id                      Int                   @id @default(autoincrement()) @map("ID")
  name                    String                @map("NAME")
  itemID                  Int                   @map("ITEM_ID")
  itemCode                String                @map("ITEM_CODE")
  imageURL                String?               @map("IMAGE_URL") @db.Text
  price                   Decimal               @map("PRICE") @db.Decimal(15, 4)
  defaultSelectionQty     Int                   @map("DEFAULT_SELECTION_QTY")
  sequence                Int                   @map("SEQUENCE")
  menuItemModifierGroupID Int                   @map("MENU_ITEM_MODIFIER_GROUP_ID")
  deleted                 Boolean               @default(false) @map("IS_DELETED")
  deletedAt               DateTime?             @map("DELETED_AT")
  createdAt               DateTime?             @default(now()) @map("CREATED_AT")
  updatedAt               DateTime?             @updatedAt @map("UPDATED_AT")
  version                 Int?                  @default(1) @map("VERSION")
  menuItemModifierGroup   MenuItemModifierGroup @relation(fields: [menuItemModifierGroupID], references: [id])
  salesItemModifiers      SalesItemModifier[]
  recipes                 Recipe[]

  @@map("MENU_ITEM_MODIFIER")
}

model Table {
  id           Int           @id @default(autoincrement()) @map("ID")
  outletId     Int           @map("OUTLET_ID")
  tableNumber  String        @map("TABLE_NUMBER")
  capacity     Int           @map("CAPACITY")
  status       String        @map("STATUS") // e.g., "occupied", "free", "reserved"
  salesId      Int?          @map("SALES_ID") // Link to active sales order
  deleted      Boolean       @default(false) @map("IS_DELETED")
  deletedAt    DateTime?     @map("DELETED_AT")
  createdAt    DateTime?     @default(now()) @map("CREATED_AT")
  updatedAt    DateTime?     @updatedAt @map("UPDATED_AT")
  version      Int?          @default(1) @map("VERSION")
  outlet       Outlet        @relation(fields: [outletId], references: [id])
  sales        Sales[]
  reservations Reservation[]

  @@map("TABLE")
}

model Recipe {
  id                 Int               @id @default(autoincrement()) @map("ID")
  menuItemId         Int               @map("MENU_ITEM_ID")
  itemId             Int               @map("ITEM_ID") // Ingredient item
  quantity           Float             @map("QUANTITY") // Amount of ingredient needed
  unit               String            @map("UNIT") // e.g., "grams", "ml"
  deleted            Boolean           @default(false) @map("IS_DELETED")
  deletedAt          DateTime?         @map("DELETED_AT")
  createdAt          DateTime?         @default(now()) @map("CREATED_AT")
  updatedAt          DateTime?         @map("UPDATED_AT")
  version            Int?              @default(1) @map("VERSION")
  batchYield         Float?            @map("BATCH_YIELD") // Number of servings per batch
  menuItemModifierId Int?              @map("MENU_ITEM_MODIFIER_ID")
  menuItemModifier   MenuItemModifier? @relation(fields: [menuItemModifierId], references: [id])
  menuItem           MenuItem          @relation(fields: [menuItemId], references: [id])
  item               Item              @relation(fields: [itemId], references: [id])

  @@map("RECIPE")
}

model Station {
  id           Int            @id @default(autoincrement()) @map("ID")
  outletId     Int            @map("OUTLET_ID")
  name         String         @map("NAME") // e.g., "Kitchen", "Bar"
  deleted      Boolean        @default(false) @map("IS_DELETED")
  deletedAt    DateTime?      @map("DELETED_AT")
  createdAt    DateTime?      @default(now()) @map("CREATED_AT")
  updatedAt    DateTime?      @updatedAt @map("UPDATED_AT")
  version      Int?           @default(1) @map("VERSION")
  outlet       Outlet         @relation(fields: [outletId], references: [id])
  orderRouting OrderRouting[]

  @@map("STATION")
}

model Reservation {
  id         Int       @id @default(autoincrement()) @map("ID")
  outletId   Int       @map("OUTLET_ID")
  customerId Int?      @map("CUSTOMER_ID")
  tableId    Int?      @map("TABLE_ID")
  dateTime   DateTime  @map("DATE_TIME")
  partySize  Int       @map("PARTY_SIZE")
  status     String    @map("STATUS") // e.g., "CONFIRMED", "CANCELLED"
  deleted    Boolean   @default(false) @map("IS_DELETED")
  deletedAt  DateTime? @map("DELETED_AT")
  createdAt  DateTime? @default(now()) @map("CREATED_AT")
  updatedAt  DateTime? @updatedAt @map("UPDATED_AT")
  version    Int?      @default(1) @map("VERSION")
  outlet     Outlet    @relation(fields: [outletId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])
  table      Table?    @relation(fields: [tableId], references: [id])

  @@map("RESERVATION")
}

model OrderRouting {
  id          Int       @id @default(autoincrement()) @map("ID")
  salesItemId Int       @map("SALES_ITEM_ID")
  stationId   Int       @map("STATION_ID")
  status      String    @map("STATUS") // e.g., "SENT", "PREPARED"
  sentAt      DateTime? @map("SENT_AT")
  completedAt DateTime? @map("COMPLETED_AT")
  deleted     Boolean   @default(false) @map("IS_DELETED")
  deletedAt   DateTime? @map("DELETED_AT")
  createdAt   DateTime? @default(now()) @map("CREATED_AT")
  updatedAt   DateTime? @updatedAt @map("UPDATED_AT")
  version     Int?      @default(1) @map("VERSION")
  salesItem   SalesItem @relation(fields: [salesItemId], references: [id])
  station     Station   @relation(fields: [stationId], references: [id])

  @@map("ORDER_ROUTING")
}

model Waitlist {
  id         Int       @id @default(autoincrement()) @map("ID")
  outletId   Int       @map("OUTLET_ID")
  customerId Int?      @map("CUSTOMER_ID")
  partySize  Int       @map("PARTY_SIZE")
  status     String    @map("STATUS") // e.g., "WAITING", "SEATED", "CANCELLED"
  waitTime   Int?      @map("WAIT_TIME") // Estimated wait time in minutes
  deleted    Boolean   @default(false) @map("IS_DELETED")
  deletedAt  DateTime? @map("DELETED_AT")
  createdAt  DateTime? @default(now()) @map("CREATED_AT")
  updatedAt  DateTime? @updatedAt @map("UPDATED_AT")
  version    Int?      @default(1) @map("VERSION")
  outlet     Outlet    @relation(fields: [outletId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("WAITLIST")
}

model SplitBill {
  id         Int       @id @default(autoincrement()) @map("ID")
  salesId    Int       @map("SALES_ID")
  amount     Decimal   @map("AMOUNT") @db.Decimal(15, 4)
  paymentId  Int?      @map("PAYMENT_ID")
  customerId Int?      @map("CUSTOMER_ID")
  deleted    Boolean   @default(false) @map("IS_DELETED")
  deletedAt  DateTime? @map("DELETED_AT")
  createdAt  DateTime? @default(now()) @map("CREATED_AT")
  updatedAt  DateTime? @updatedAt @map("UPDATED_AT")
  version    Int?      @default(1) @map("VERSION")
  payment    Payment?  @relation(fields: [paymentId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("SPLIT_BILL")
}

// Main Promotion Model (Simplified)
model Promotion {
  id          Int             @id @default(autoincrement()) @map("ID")
  name        String          @map("NAME")
  description String?         @map("DESCRIPTION")
  type        PromotionType   @map("TYPE")
  status      PromotionStatus @default(ACTIVE) @map("STATUS")

  // Simple conflict resolution
  priority        Int             @default(1) @map("PRIORITY") // Higher number = higher priority
  combinationRule CombinationRule @default(STACKABLE) @map("COMBINATION_RULE")

  // Discount Configuration
  discountType     DiscountType @map("DISCOUNT_TYPE")
  discountValue    Decimal?     @map("DISCOUNT_VALUE") // For percentage or fixed amount
  buyQuantity      Int?         @map("BUY_QUANTITY") // For Buy X Get Y
  getQuantity      Int?         @map("GET_QUANTITY") // For Buy X Get Y
  getDiscountValue Decimal?     @map("GET_DISCOUNT_VALUE") // For discounted items in Buy X Get Y with discount

  // Date/Time Constraints
  startDate DateTime? @map("START_DATE")
  endDate   DateTime? @map("END_DATE")
  startTime String?   @map("START_TIME") // Format: "HH:MM" (e.g., "19:00")
  endTime   String?   @map("END_TIME") // Format: "HH:MM" (e.g., "21:00")

  // Day of Week Constraints (for daily/hourly promotions)
  validDays String? @map("VALID_DAYS") // JSON array: ["MONDAY", "TUESDAY"] or "ALL"

  // Minimum Purchase Requirements
  minPurchaseAmount Decimal? @map("MIN_PURCHASE_AMOUNT")
  minPurchaseQty    Int?     @map("MIN_PURCHASE_QTY")

  // Usage Limits
  maxUsageTotal       Int? @map("MAX_USAGE_TOTAL") // Total usage limit
  maxUsagePerCustomer Int? @map("MAX_USAGE_PER_CUSTOMER") // Per customer limit
  currentUsage        Int  @default(0) @map("CURRENT_USAGE")

  // Customer Constraints (for customer-specific promotions)
  isCustomerSpecific Boolean @default(false) @map("IS_CUSTOMER_SPECIFIC")

  // Metadata
  createdBy String?   @map("CREATED_BY")
  deleted   Boolean   @default(false) @map("IS_DELETED")
  deletedAt DateTime? @map("DELETED_AT")
  createdAt DateTime  @default(now()) @map("CREATED_AT")
  updatedAt DateTime  @updatedAt @map("UPDATED_AT")
  version   Int?      @default(1) @map("VERSION")

  // Relations
  items        PromotionItem[]
  customers    PromotionCustomer[]
  usageHistory PromotionUsage[]

  @@map("PROMOTION")
}

// Items included in the promotion
model PromotionItem {
  id          Int     @id @default(autoincrement()) @map("ID")
  promotionId Int     @map("PROMOTION_ID")
  itemId      Int?    @map("ITEM_ID") // Specific item ID (if applicable)
  categoryId  Int?    @map("CATEGORY_ID") // Category ID (if promotion applies to category)
  itemCode    String? @map("ITEM_CODE") // Item code/SKU
  itemName    String? @map("ITEM_NAME") // Item name for reference

  // For Buy X Get Y promotions - specify which items are "buy" vs "get"
  itemRole String? @map("ITEM_ROLE") // "BUY", "GET", or "BOTH"

  deleted   Boolean  @default(false) @map("IS_DELETED")
  createdAt DateTime @default(now()) @map("CREATED_AT")
  updatedAt DateTime @updatedAt @map("UPDATED_AT")
  version   Int?     @default(1) @map("VERSION")

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("PROMOTION_ITEM")
}

// Customer-specific promotion assignments
model PromotionCustomer {
  id          Int @id @default(autoincrement()) @map("ID")
  promotionId Int @map("PROMOTION_ID")
  customerId  Int @map("CUSTOMER_ID")

  // Individual customer limits (overrides promotion defaults)
  maxUsage     Int? @map("MAX_USAGE")
  currentUsage Int  @default(0) @map("CURRENT_USAGE")

  deleted   Boolean  @default(false) @map("IS_DELETED")
  createdAt DateTime @default(now()) @map("CREATED_AT")
  updatedAt DateTime @updatedAt @map("UPDATED_AT")
  version   Int?     @default(1) @map("VERSION")

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([promotionId, customerId])
  @@map("PROMOTION_CUSTOMER")
}

// Track promotion usage history
model PromotionUsage {
  id          Int  @id @default(autoincrement()) @map("ID")
  promotionId Int  @map("PROMOTION_ID")
  customerId  Int? @map("CUSTOMER_ID")
  salesId     Int? @map("SALES_ID") // Reference to sales transaction

  discountAmount Decimal  @map("DISCOUNT_AMOUNT")
  usedAt         DateTime @default(now()) @map("USED_AT")
  version        Int?     @default(1) @map("VERSION")

  promotion Promotion @relation(fields: [promotionId], references: [id])
  customer  Customer? @relation(fields: [customerId], references: [id])

  @@map("PROMOTION_USAGE")
}

model RegisteredDevice {
  id             BigInt    @id @default(autoincrement()) @map("ID")
  clientDeviceId String    @unique @map("CLIENT_DEVICE_ID") // Globally unique ID from Flutter app (e.g., UUID)
  siteId         Int       @map("SITE_ID")
  tenantId       Int       @map("TENANT_ID") // Denormalized from outlet for easier tenant-wide device queries
  deviceName     String    @map("DEVICE_NAME") // User-friendly name given during registration
  deviceType     String?   @map("DEVICE_TYPE") // Optional: "pos", "kds", "tablet", "mobile"
  status         String    @default("active") @map("STATUS") // "active", "inactive", "pending_approval", "revoked"
  appVersion     String?   @map("APP_VERSION") // Version of the Flutter app
  lastSeenAt     DateTime? @map("LAST_SEEN_AT") // Updated on API activity
  registeredAt   DateTime  @default(now()) @map("REGISTERED_AT")
  updatedAt      DateTime  @updatedAt @map("UPDATED_AT")

  @@unique([tenantId, siteId]) // Unique combination within tenant
  @@index([clientDeviceId])
  @@index([tenantId])
  @@map("REGISTERED_DEVICE")
}
